//
// Generated file, do not edit! Created by nedtool 5.2 from Paquetes/Transporte.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __TRANSPORTE_M_H
#define __TRANSPORTE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Paquetes/Transporte.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet Transporte
 * {
 *     unsigned int secuencia;
 *     short ack = -1; //0: NACK, 1:ACK
 *     simtime_t timestamp;
 *     simtime_t txFinish;
 *     unsigned int protocolo;
 * }
 * </pre>
 */
class Transporte : public ::omnetpp::cPacket
{
  protected:
    unsigned int secuencia;
    short ack;
    ::omnetpp::simtime_t timestamp;
    ::omnetpp::simtime_t txFinish;
    unsigned int protocolo;

  private:
    void copy(const Transporte& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Transporte&);

  public:
    Transporte(const char *name=nullptr, short kind=0);
    Transporte(const Transporte& other);
    virtual ~Transporte();
    Transporte& operator=(const Transporte& other);
    virtual Transporte *dup() const override {return new Transporte(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getSecuencia() const;
    virtual void setSecuencia(unsigned int secuencia);
    virtual short getAck() const;
    virtual void setAck(short ack);
    virtual ::omnetpp::simtime_t getTimestamp() const;
    virtual void setTimestamp(::omnetpp::simtime_t timestamp);
    virtual ::omnetpp::simtime_t getTxFinish() const;
    virtual void setTxFinish(::omnetpp::simtime_t txFinish);
    virtual unsigned int getProtocolo() const;
    virtual void setProtocolo(unsigned int protocolo);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Transporte& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Transporte& obj) {obj.parsimUnpack(b);}


#endif // ifndef __TRANSPORTE_M_H

